----------------------------------------------TRIGGERS----------------------------------------------
-Triggers are the plsql block , which are executed before or after specific event or instaed of specific event
-triggers are executed automatically by the database server
-Triggers are defined on tables,views,schemas,databases
-Triggers are fired when one of the below situation occurs
    thses are database triggers:
       *When DML(INSERT,UPDATE,DELETE) occurs 
	   *When DDL(CREATE,ALTER,DROP) occurs
	   *When some database operations occurs(like logon,startup,servererror....)
	 other one is application triggers
	 
	    these triggers are related with some application like oracle forms....
	   
What are triggers and triggers types:
      -why do we use triggers 
	       -security,auditing,data integrity,table logging,event logging,derived data
Note:  1.we use trigger to get to jnow the wrong usage of statements
       2.provide security before updateding any table
	   
	   -three types of triggers    
	       1.DML triggers
		   2.Compound triggers
		   3.Non-DML triggers
		   
		   
		   
DML TRIGGER:
----------
    DML TRIGGERS are PL/SQL Blocks running when the specified event occurs
	-we use DML triggers for duplications,log table maintenance,security etc.
	
	
The syntax for creating a trigger is −

CREATE [OR REPLACE ] TRIGGER trigger_name  
timimg=BEFORE | AFTER | INSTEAD OF 
event=INSERT [OR] | UPDATE [OR] | DELETE | UPDATE OF col_list 
ON object_name  
[REFERENCING OLD AS old NEW AS new]  
[FOR EACH ROW]  
WHEN (condition)   
DECLARE 
   Declaration-statements 
BEGIN  
   Executable-statements 
EXCEPTION 
   Exception-handling-statements 
END; 
Where,

CREATE [OR REPLACE] TRIGGER trigger_name − Creates or replaces an existing trigger with the trigger_name.

{BEFORE | AFTER | INSTEAD OF} − This specifies when the trigger will be executed. The INSTEAD OF clause is used for creating trigger on a view.

{INSERT [OR] | UPDATE [OR] | DELETE} − This specifies the DML operation.

[OF col_name] − This specifies the column name that will be updated.

[ON table_name] − This specifies the name of the table associated with the trigger.

[REFERENCING OLD AS o NEW AS n] − This allows you to refer new and old values for various DML statements, such as INSERT, UPDATE, and DELETE.

[FOR EACH ROW] − This specifies a row-level trigger, i.e., the trigger will be executed for each row being affected. Otherwise the trigger will execute just once when the SQL statement is executed, which is called a table level trigger.

WHEN (condition) − This provides a condition for rows for which the trigger would fire. This clause is valid only for row-level triggers.


 
Specifying the timing of triggers:
---------------------------------
 There are three options two specify the timing
  1.Before:
    -we can allow or reject the specified action
    -we can specify default values for the columns  
    -we can validate the complex business rules
  2.After:
    -make some after checks
    -Duplicate tables or add log records
  3.Instead of:
    
   note: there can be multiple triggers with same timing points on table or view.
	

Statement and row level triggers:
--------------------------------

1.BEFORE STATEMENT:
    -This is the statement level trigger, this trigger will fire right before the execution of DML statement
2.BEFORE ROW
    -This is the row level trigger , this trigger will fire, right before the execeution of each row  
3.AFTER ROW
    -This is the row level trigger , this trigger will fire, right before the execeution of each row
4.AFTER STATEMENT
   -This is the statement level trigger, this trigger will fire right after the execution of DML statement


use of :old and :new reference in triggers:
   note: which is only applicable for the row level trigger


Conditional Predicates:
-----------------------
Conditional predicates are used to use single trigger for the different events using
                                          -IF 
										  -INSERTING,UPDATING AND DELETING COMMANDS


UPDATE OF EVENT event:
---------------------
we can not use the UPDATE command , when we usinf update of
- it is used to update the table for specific columns(it is useful for the business point of view)

use of WHEN CLAUSE in triggers:
------------------------------
it reduces the execution statement in body and it leads to increase the performance
NOTE: 
ORA-04077: WHEN clause cannot be used with table level triggers 


syntax to disable trigger:
     
 alter trigger trigger_name disable;




Instead of Triggers:
-------------------
     -simple views are used only with the views 
	 -Instead of triggers used to apply some DML statements on un updatable views
  some important things about INSTEAD OF TRIGGERS:
     -Instead of triggers are used only with viws
	 -Generally used with complex views
	 -if your view has a check option, it wont be enforced when we use the instead of triggers
	 -BEFORE OR AFTER timings are not valid for instead of triggers
	 


exploring and managing triggers:
-------------------------------

  there are two data dictionary views for the triggers:
  ----------------------------------------------------
  1.user_objects;
  2.user_triggers;

to check all triggers information:
----------------
   select * from user_triggers;
   select * from dba_triggers;
  
  alter trigger trigger_name enale|disable;
  
 disable or enable all triggers in a table:
 -----------------------------------------
 alter table table_name [enable|disable] all triggers;

 alter trigger trigger_name compile;
 
 drop trigger trigger_name;
 
 
 
 
 
 
 
COMPOUND TRIGGERS:
-----------------
-Compound triggers is a single trigger that allows us to specify actions for each DML trigger types.
-So, they can share the variables,types etc amoung each other
-Why we use compound triggers:
 ----------------------------
       -Taking actions for various timing points by sharing the common data
	   -Making inserts to some other tables faster then the bulk inserts
	   -Avoiding mutating table error
-Compound triggers restrictions:
-------------------------------
        -Compound trigger must be a DML trigger defined on the table or view
		-Compound trigger body must be a Compound trigger block
		-Compound trigger body can not have a initialization block
		- :old and :new can not be used in the declaration or before or after statements
		-The firing order of compound is not guaranteed if we dont use the FOLLOWS CLAUSE


SYNTAX:
------
CREATE [OR REPLACE] TRIGGER trigger_name
FOR INSERT |UPDATE|DELETE|UPDATE OF column_list
ON object_name
[REFERENCING OLD as old NEW as new]
[WHEN (condition)]
COMPOUND TRIGGER
 [variables,types etc]
  BEFORE STATEMENT IS
     pl/sql block
	[EXCEPTION]
  END BEFORE STATEMENT;
  BEFORE EACH ROW IS
     pl/sql block
	[EXCEPTION]
  END BEFORE STATEMENT;
  AFTER EACH ROW IS
     pl/sql block
	[EXCEPTION]
  END BEFORE STATEMENT;
  AFTER STATEMENT IS
     pl/sql block
	[EXCEPTION]
  END BEFORE STATEMENT;
END; 



MUTATING TABLE ERRORS:
---------------------
        Trigger Restriction on Mutating Tables:
		   -A Mutating table is :
		       *a table that being modified
			   *a table that mieght be updated with DELETE CASCADE	
		   -Row Level Trigger can not query or modify a mutating table.
		   -This restriction prevents inconsistent data changes
		   -VIEWS being modified by the INSTEAD OF TRIGGERS are not considered as mutating
        We can handle the mutating table error with couple of ways:
		    -store related data in the another table
			-store related data in the package
			-use of COMPOUND TRIGGERS
------------------------------SPECIFYING THE TIMING OF TRIGGERS------------------------------
---------------------------------------------------------------------------------------------
----------------- The create code of the first trigger
create or replace trigger first_trigger 
before insert or update on employees_copy 
begin
  dbms_output.put_line('An insert or update occurred in employees_copy table!.');
end;
----------------- sql commands to or not to run the trigger
update employees_copy set salary = salary + 100;
delete from employees_copy;


2>>>>>

---------------------------------------------------------------------------------------------
-------------------------------STATEMENT & ROW LEVEL TRIGGERS--------------------------------
---------------------------------------------------------------------------------------------
----------------- before statement level trigger example
create or replace trigger before_statement_emp_cpy 
before insert or update on employees_copy 
begin
  dbms_output.put_line('Before Statement Trigger is Fired!.');
end;
----------------- after statement level trigger example
create or replace trigger after_statement_emp_cpy 
after insert or update on employees_copy 
begin
  dbms_output.put_line('After Statement Trigger is Fired!.');
end;
----------------- before row level trigger example
create or replace trigger before_row_emp_cpy 
before insert or update on employees_copy 
for each row
begin
  dbms_output.put_line('Before Row Trigger is Fired!.');
end;
----------------- after row level trigger example
create or replace trigger after_row_emp_cpy 
after insert or update on employees_copy 
for each row
begin
  dbms_output.put_line('After Row Trigger is Fired!.');
end;
----------------- sql queries used in this lecture
update employees_copy set salary = salary + 100 where employee_id = 100;
update employees_copy set salary = salary + 100 where employee_id = 99;
update employees_copy set salary = salary + 100
where department_id = 30;

3>>>>

---------------------------------------------------------------------------------------------
-------------------------------:NEW & :OLD QUALIFIERS IN TRIGGERS----------------------------
---------------------------------------------------------------------------------------------
create or replace trigger before_row_emp_cpy 
before insert or update or delete on employees_copy 
referencing old as O new as N
for each row
begin
  dbms_output.put_line('Before Row Trigger is Fired!.');
  dbms_output.put_line('The Salary of Employee '||:o.employee_id
    ||' -> Before:'|| :o.salary||' After:'||:n.salary);
	
4>>>>>>

---------------------------------------------------------------------------------------------
--------------------------------USING CONDITIONAL PREDICATES --------------------------------
---------------------------------------------------------------------------------------------
create or replace trigger before_row_emp_cpy 
before insert or update or delete on employees_copy 
referencing old as O new as N
for each row
begin
  dbms_output.put_line('Before Row Trigger is Fired!.');
  dbms_output.put_line('The Salary of Employee '||:o.employee_id
    ||' -> Before:'|| :o.salary||' After:'||:n.salary);
  if inserting then
    dbms_output.put_line('An INSERT occurred on employees_copy table');
  elsif deleting then
    dbms_output.put_line('A DELETE occurred on employees_copy table');
  elsif updating ('salary') then
    dbms_output.put_line('A DELETE occurred on the salary column');
  elsif updating then
    dbms_output.put_line('An UPDATE occurred on employees_copy table');
  end if;
end;

5>>>>>>>>>>
      ------------------------------------------------------------------------------------------
 ----------------------------raise_application_error---------------------------------------
 create or replace trigger before_row_emp_trigger 
before insert or update or delete on employees_copy
for each row
begin
    dbms_output.put_line('before row level trigger is fired!!');
    dbms_output.put_line('before row level trigger is fired employees !!'||:old.employee_id||'==>before:'||:old.salary||'==>After:'||:new.salary);
    if INSERTING THEN
        dbms_output.put_line('before row level INSERTING EVENT trigger is fired!!');
       elsif UPDATING('salary') THEN
             if :new.salary>50000 then
                raise_application_error('-20001','salary should not be higher then the 50000');
             end if;   
                 dbms_output.put_line('before row level UPDATING EVENT and specific column trigger is fired!!');
      elsif UPDATING THEN
        dbms_output.put_line('before row level UPDATING EVENT trigger is fired!!');
       elsif DELETING THEN
        dbms_output.put_line('before row level DELETING EVENT trigger is fired!!');
   end if;
end;
------------------------------------------
create or replace trigger prevent_high_salary
before insert or update of salary on employees_copy 
for each row
when (new.salary > 50000)
begin
  raise_application_error(-20006,'A salary cannot be higher than 50000!.');
end;



6>>>
---------------------------------------------------------------------------------------------
--------------------------------USING UPDATE OF EVENT IN TRIGGERS----------------------------
---------------------------------------------------------------------------------------------
create or replace trigger prevent_updates_of_constant_columns
before update of hire_date,salary on employees_copy 
for each row
begin
  raise_application_error(-20005,'You cannot modify the hire_date and salary columns');
end;

7>>>
 
--------------------------------------------------------------------------------------------
----------------------------------USING WHEN CLAUSE ON TRIGGERS------------------------------
---------------------------------------------------------------------------------------------
create or replace trigger prevent_high_salary
before insert or update of salary on employees_copy 
for each row
when (new.salary > 50000)
begin
  raise_application_error(-20006,'A salary cannot be higher than 50000!.');
end;

8>>>

---------------------------------------------------------------------------------------------
-----------------------------------USING INSTEAD OF TRIGGERS---------------------------------
---------------------------------------------------------------------------------------------
----------------- creating a complex view -----------------
CREATE OR REPLACE VIEW VW_EMP_DETAILS AS
  SELECT UPPER(DEPARTMENT_NAME) DNAME, MIN(SALARY) MIN_SAL, MAX(SALARY) MAX_SAL 
    FROM EMPLOYEES_COPY JOIN DEPARTMENTS_COPY
    USING (DEPARTMENT_ID)
    GROUP BY DEPARTMENT_NAME;
----------------- updating the complex view -----------------
UPDATE VW_EMP_DETAILS SET DNAME = 'EXEC DEPT' WHERE
  UPPER(DNAME) = 'EXECUTIVE';
----------------- Instead of trigger -----------------
CREATE OR REPLACE TRIGGER EMP_DETAILS_VW_DML
  INSTEAD OF INSERT OR UPDATE OR DELETE ON VW_EMP_DETAILS
  FOR EACH ROW
  DECLARE
    V_DEPT_ID PLS_INTEGER;
  BEGIN
  
  IF INSERTING THEN
    SELECT MAX(DEPARTMENT_ID) + 10 INTO V_DEPT_ID FROM DEPARTMENTS_COPY;
    INSERT INTO DEPARTMENTS_COPY VALUES (V_DEPT_ID, :NEW.DNAME,NULL,NULL);
  ELSIF DELETING THEN
    DELETE FROM DEPARTMENTS_COPY WHERE UPPER(DEPARTMENT_NAME) = UPPER(:OLD.DNAME);
  ELSIF UPDATING('DNAME') THEN
    UPDATE DEPARTMENTS_COPY SET DEPARTMENT_NAME = :NEW.DNAME
      WHERE UPPER(DEPARTMENT_NAME) = UPPER(:OLD.DNAME);
  ELSE
    RAISE_APPLICATION_ERROR(-20007,'You cannot update any data other than department name!.');
  END IF;
END;

results check:

select * from departments_copy;

select * from VW_EMP_DETAILS;

update vw_emp_details set dname='exec dept' where UPPER(DNAME)='EXECUTIVE';

delete from VW_EMP_DETAILS where dname='EXEC DEPT';

insert into VW_EMP_DETAILS values ('KExecution',null,null);

update vw_emp_details set min_sal=300 where dname='SALES';
/*You cannot update any data other than department name*/

9>>>>
---------------------------------------------------------------------------------------------
-----------------------------------CREATING DISABLED TRIGGERS--------------------------------
---------------------------------------------------------------------------------------------  
create or replace trigger prevent_high_salary
before insert or update of salary on employees_copy 
for each row
disable
when (new.salary > 50000)
begin
  raise_application_error(-20006,'A salary cannot be higher than 50000!.');
end;

---------------------------------general examples------------------------------
create table employees_copy as select * from hr.employees;
select * from departments_copy;
desc departments_copy;
create table departments_copy as select * from hr.departments;
/*most of the time sequences are used to assign primary key value, here we show how that happened*/
create sequence seq_dept_copy start with 280 increment by 10;

create or replace trigger before_insert_dept_copy 
before insert or update on departments_copy
for each row
begin
     --select seq_dept_copy.nextval into :new.department_id from dual;
     :new.department_id:=seq_dept_copy.nextval;
     dbms_output.put_line('we r going to insert the departments_copy table');
end;

insert into departments_copy(department_name,manager_id,location_id) values('oracle',11,22);
insert into departments_copy(department_name,manager_id,location_id) values('HCM',130,220);
insert into departments_copy(department_name,manager_id,location_id) values('ERP',140,230);
insert into departments_copy(department_name,manager_id,location_id) values('sim',150,250);

10>>>>

---------------------------------------------------------------------------------------------
-------------------------------------COMPOUND TRIGGERS---------------------------------------
---------------------------------------------------------------------------------------------
----------------- The first simple compound trigger
create or replace trigger trg_comp_emps
for insert or update or delete on employees_copy 
compound trigger
v_dml_type varchar2(10);
  before statement is
   begin
    if inserting then
      v_dml_type := 'INSERT';
    elsif updating then
      v_dml_type := 'UPDATE';
    elsif deleting then
      v_dml_type := 'DELETE';
    end if;
    dbms_output.put_line('Before statement section is executed with the '||v_dml_type ||' event!.');
  end before statement; 
  before each row is
  t number;
    begin
      dbms_output.put_line('Before row section is executed with the '||v_dml_type ||' event!.');
  end before each row;
  after each row is
    begin
      dbms_output.put_line('After row section is executed with the '||v_dml_type ||' event!.');
  end after each row;
  after statement is
    begin
      dbms_output.put_line('After statement section is executed with the '||v_dml_type ||' event!.');
  end after statement;
end;


result:
      checking dml statement:
	     update employees_copy set salary=salary+100 where employee_id=101;
		 
		 1 row(s) updated.
    the before statement trigger fired!UPDATEevent!
    the before each row trigger fired!UPDATEevent!
    the after each row trigger fired!UPDATEevent!
    the after statement trigger fired!UPDATEevent!
----------------- 
CREATE OR REPLACE TRIGGER TRG_COMP_EMPS
  FOR INSERT OR UPDATE OR DELETE ON EMPLOYEES_COPY
  COMPOUND TRIGGER
    TYPE T_AVG_DEPT_SALARIES IS TABLE OF EMPLOYEES_COPY.SALARY%TYPE INDEX BY PLS_INTEGER;
    AVG_DEPT_SALARIES T_AVG_DEPT_SALARIES;
  /*here, we got the avg sal of the each department into the asociative array, so it makes checks much faster*/
  BEFORE STATEMENT IS
    BEGIN
      FOR AVG_SAL IN (SELECT AVG(SALARY) SALARY , NVL(DEPARTMENT_ID,999) DEPARTMENT_ID
                        FROM EMPLOYEES_COPY GROUP BY DEPARTMENT_ID) LOOP
        AVG_DEPT_SALARIES(AVG_SAL.DEPARTMENT_ID) := AVG_SAL.SALARY;
      END LOOP;
  END BEFORE STATEMENT;
  
  AFTER EACH ROW IS
    V_INTERVAL NUMBER := 15;
    BEGIN
       IF :NEW.SALARY > AVG_DEPT_SALARIES(:NEW.DEPARTMENT_ID) + AVG_DEPT_SALARIES(:NEW.DEPARTMENT_ID)*V_INTERVAL/100 THEN
        RAISE_APPLICATION_ERROR(-20005,'A raise cannot be '|| V_INTERVAL|| ' percent higher than
                                  its department''s average!');
       END IF;
  END AFTER EACH ROW;
  
  AFTER STATEMENT IS
    BEGIN
      DBMS_OUTPUT.PUT_LINE('All the changes are done successfully!');
  END AFTER STATEMENT;

END;

Note:Use of associate array with trigger:
          -if our update statement will update 100 rows,when we want to know the avg sal of the specific dept in each update, 
     we have to query from the database 100 times, so this will decrease the performance
   -Instead we got the avg sal into our memory, while doing update, we can get the data from the memory much faster then , getting from the database;
   -its easy to get the avg salary by indexed based using department_id from associative array

11<<<<<<

---------------------------------------------------------------------------------------------
------------------------------------ MUTATING TABLE ERRORS ----------------------------------
---------------------------------------------------------------------------------------------
NOTE:
 1.DML statements are valid only before and after statement, but if same dml event fires , we fall into the recursive levels, so we have to use the dml statements which should not repeated
 2.in row level trigger
      if we created from the same table or modified the same table with dml command, in this case we will get mutating error
	  -we handle this using compound trigger, but has some restrcitions
	                     1.we can not make change or query inside the row level section trigger
						 2.if u run the dml command inside the before or after statement,if that trigger runs again, at that tiem also we will get mutating error
						 
	        

----------------- A mutating table error example
create or replace trigger trg_mutating_emps
before insert or update on employees_copy 
for each row
    declare
    v_interval number := 15;
    v_avg_salary number;
    begin
    select avg(salary) into v_avg_salary from employees_copy where department_id = :new.department_id;
      if :new.salary > v_avg_salary*v_interval/100 then
        RAISE_APPLICATION_ERROR(-20005, 'A raise cannot be '|| v_interval|| ' percent higher than its department''s average');
      end if;
end;
----------------- Getting mutating table error within a compound trigger
create or replace trigger trg_comp_emps
for insert or update or delete on employees_copy 
compound trigger
  type t_avg_dept_salaries is table of employees_copy.salary%type index by pls_integer;
  avg_dept_salaries t_avg_dept_salaries;
  before statement is
   begin
    for avg_sal in (select avg(salary) salary,nvl(department_id,999) department_id from employees_copy group by department_id) loop
      avg_dept_salaries(avg_sal.department_id) := avg_sal.salary;
    end loop;
  end before statement; 

  after each row is
    v_interval number := 15;
    begin
    update employees_copy set commission_pct = commission_pct;
      if :new.salary > avg_dept_salaries(:new.department_id)*v_interval/100 then
        RAISE_APPLICATION_ERROR(-20005, 'A raise cannot be '|| v_interval|| ' percent higher than its department''s average');
      end if;
  end after each row;
  after statement is
    begin
      dbms_output.put_line('All the updates are done successfully!.');
  end after statement;
end;
              
			  ------------------------
			  create or replace trigger trg_comp_emps
for insert or update on employees_copy 
compound trigger
  type t_avg_dept_salaries is table of employees_copy.salary%type index by pls_integer;
  avg_dept_salaries t_avg_dept_salaries;
  before statement is
   begin
     delete from employees_copy where employee_id=105;    
    for avg_sal in (select avg(salary) salary,nvl(department_id,999) department_id from employees_copy group by department_id) loop
      avg_dept_salaries(avg_sal.department_id) := avg_sal.salary;
    end loop;
  end before statement; 

  after each row is
    v_interval number := 15;
    begin
      if :new.salary > avg_dept_salaries(:new.department_id)*v_interval/100 then
        RAISE_APPLICATION_ERROR(-20005, 'A raise cannot be '|| v_interval|| ' percent higher than its department''s average');
      end if;
  end after each row;
  after statement is
    begin
     delete from employees_copy where employee_id=104;
     dbms_output.put_line('All the updates are done successfully!.');
    end after statement;
end;
			  --------------------------
----------------- An example of getting maximum level of recursive SQL levels
create or replace trigger trg_comp_emps
for insert or update or delete on employees_copy 
compound trigger
  type t_avg_dept_salaries is table of employees_copy.salary%type index by pls_integer;
  avg_dept_salaries t_avg_dept_salaries;
  before statement is
   begin
    update employees_copy set commission_pct = commission_pct where employee_id = 100;
    for avg_sal in (select avg(salary) salary,nvl(department_id,999) department_id from employees_copy group by department_id) loop
      avg_dept_salaries(avg_sal.department_id) := avg_sal.salary;
    end loop;
  end before statement; 

  after each row is
    v_interval number := 15;
    begin
      if :new.salary > avg_dept_salaries(:new.department_id)*v_interval/100 then
        RAISE_APPLICATION_ERROR(-20005, 'A raise cannot be '|| v_interval|| ' percent higher than its department''s average');
      end if;
  end after each row;
  after statement is
    begin
      update employees_copy set commission_pct = commission_pct where employee_id = 100;
      dbms_output.put_line('All the updates are done successfully!.');
  end after statement;
end;